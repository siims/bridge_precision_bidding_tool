{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["allBiddingSequence","biddingSystem","1C","description","responses","1D","1H","1S","1N","2C","2D","2H","2S","interference","2N","naturalBid","App","_useState","useState","_useState2","Object","slicedToArray","currentBidder","setBidder","_useState3","_useState4","biddingSoFar","setBidding","_useState5","_useState6","potentialBidDetails","setPotentialBidDetails","handleMakeBid","event","bidKey","currentTarget","dataset","bidkey","lastElement","_","last","lastBid","bid","currentBid","concat","toConsumableArray","seat","displayBidDetails","isEmpty","react_default","a","createElement","className","onClick","slice","length","style","display","gridTemplateColumns","map","bidRecord","key","bidding","indexOf","getPossibleBids","data-bidkey","onMouseEnter","onPointerEnter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.18cc7210.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport \"./App.css\";\nimport _ from \"lodash\";\n\n// prettier-ignore\ntype BidKey = \"pass\" | \"dbl\" | \"rdbl\" | \"interference\" | \"undiscussed\" |\n  \"1C\" | \"1D\" | \"1H\" | \"1S\" | \"1N\" |\n  \"2C\" | \"2D\" | \"2H\" | \"2S\" | \"2N\" |\n  \"3C\" | \"3D\" | \"3H\" | \"3S\" | \"3N\" |\n  \"4C\" | \"4D\" | \"4H\" | \"4S\" | \"4N\" |\n  \"5C\" | \"5D\" | \"5H\" | \"5S\" | \"5N\" |\n  \"6C\" | \"6D\" | \"6H\" | \"6S\" | \"6N\" |\n  \"7C\" | \"7D\" | \"7H\" | \"7S\" | \"7N\"\n\n// prettier-ignore\nconst allBiddingSequence: BidKey[] = [\n  \"1C\", \"1D\", \"1H\", \"1S\", \"1N\",\n  \"2C\", \"2D\", \"2H\", \"2S\", \"2N\",\n  \"3C\", \"3D\", \"3H\", \"3S\", \"3N\",\n  \"4C\", \"4D\", \"4H\", \"4S\", \"4N\",\n  \"5C\", \"5D\", \"5H\", \"5S\", \"5N\",\n  \"6C\", \"6D\", \"6H\", \"6S\", \"6N\",\n  \"7C\", \"7D\", \"7H\", \"7S\", \"7N\"\n];\n\ninterface Bid {\n  description: string;\n  alertable?: boolean;\n  responses?: { [bid: string]: Bid };\n}\n\nconst biddingSystem: { [bid: string]: Bid } = {\n  \"1C\": {\n    description: \"16+ HCP (or 17+ balanced)\",\n    responses: {\n      \"1D\": {\n        description: \"0-7 HCP, any shape\",\n        responses: {}\n      },\n      \"1H\": {\n        description: \"8-11 HCP, any shape; by passed hand: 5+ cards, 8-10 HCP, game forcing\",\n        responses: {}\n      },\n      \"1S\": {\n        description: \"12+ HCP, 5+; by passed hand: 5+ cards, 8-10 HCP, game forcing\",\n        responses: {}\n      },\n      \"1N\": {\n        description: \"12+ HCP, balanced, no 5-card suit; by passed hand: balanced, 8-10 HCP, game forcing\",\n        responses: {}\n      },\n      \"2C\": {\n        description: \"12+ HCP, 5+; by passed hand: 5+ cards, 8-10 HCP, game forcing\",\n        responses: {}\n      },\n      \"2D\": {\n        description: \"12+ HCP, 5+; by passed hand: 5+ cards, 8-10 HCP, game forcing\",\n        responses: {}\n      },\n      \"2H\": {\n        description: \"12+ HCP, 5+\",\n        responses: {}\n      },\n      \"2S\": {\n        description: \"2+ HCP, any (4441) (2NT asks for singleton); by passed hand: 8-10 HCP (4441)\",\n        responses: {}\n      },\n      interference: {\n        description:\n          \"At 1- or 2-level, Pass = 0-5, X = 6-7, others natural GF\\n\" +\n          \"At 3+ level, Pass = 0-6, X = 7+ GF, others natural GF\\n\" +\n          \"2-level cue = GF balanced no stopper, 3-level cue = 3-suiter GF\\n\" +\n          \"If responder is 0-7, pretend the opponents opened, doubles are takeout\"\n      }\n    }\n  },\n  \"1D\": {\n    description: \"2+ Diamonds, Good 10 to 15 HCP\"\n  },\n  \"1H\": {\n    description: \"5M+ Cards, Good 10 to 15 HCP\"\n  },\n  \"1S\": {\n    description: \"5M+ Cards, Good 10 to 15 HCP\"\n  },\n  \"1N\": {\n    description: \"Balanced, 14-16 HCP\"\n  },\n  \"2C\": {\n    description: \"6+ Clubs, Good 10 to 15 HCP\"\n  },\n  \"2D\": {\n    description: \"4414/4405/3415/4315, Good 10 to 15 HCP\"\n  },\n  \"2H\": {\n    description: \"weak, 6+ suit, 0 to bad 10 HCP\"\n  },\n  \"2S\": {\n    description: \"weak, 6+ suit, 0 to bad 10 HCP\"\n  },\n  \"2N\": {\n    description: \"20-21 HCP and may have a 5-card major\"\n  }\n};\n\nconst naturalBid: Bid = {\n  description: \"natural\"\n};\n\ntype Seat = \"N\" | \"E\" | \"S\" | \"W\";\n\ninterface BidRecord {\n  seat: Seat;\n  bidKey: BidKey;\n  bid: Bid;\n}\n\ninterface PotentialBid {\n  description: string;\n  bidKey: BidKey;\n}\n\nconst App: React.FC = () => {\n  const [currentBidder, setBidder] = useState<Seat>(\"N\");\n  const [biddingSoFar, setBidding] = useState<BidRecord[]>([]);\n  const [potentialBidDetails, setPotentialBidDetails] = useState<PotentialBid | undefined>();\n\n  function handleMakeBid(event: React.SyntheticEvent<HTMLButtonElement>) {\n    const bidKey: BidKey = event.currentTarget.dataset.bidkey as BidKey;\n    const lastElement = _.last(biddingSoFar);\n    if (lastElement) {\n      const lastBid: Bid = lastElement.bid;\n      const currentBid: Bid = (lastBid.responses && lastBid.responses[bidKey]) || naturalBid;\n      setBidding([...biddingSoFar, {seat: currentBidder, bidKey, bid: currentBid}]);\n    } else {\n      const currentBid: Bid = biddingSystem[bidKey] ? biddingSystem[bidKey] : naturalBid;\n      setBidding([{seat: currentBidder, bidKey, bid: currentBid}]);\n    }\n    setBidder(currentBidder === \"N\" ? \"S\" : \"N\");\n  }\n\n  function resetBidding(event: React.SyntheticEvent<HTMLButtonElement>) {\n    setBidding([]);\n  }\n\n  function getLastBidIndexInAllBids(last: BidRecord | undefined): number {\n    return last ? allBiddingSequence.indexOf(last.bidKey) : 0;\n  }\n\n  function getPossibleBids(bidding: BidRecord[]) {\n    if (_.isEmpty(biddingSoFar)) {\n      return allBiddingSequence;\n    }\n    return allBiddingSequence.slice(getLastBidIndexInAllBids(_.last(bidding)) + 1);\n  }\n\n  function undoLastBid() {\n    if (_.isEmpty(biddingSoFar)) {\n      return;\n    }\n    setBidding(biddingSoFar.slice(0, biddingSoFar.length - 1));\n    setBidder(currentBidder === \"N\" ? \"S\" : \"N\");\n  }\n\n  function displayBidDetails(event: React.SyntheticEvent<HTMLButtonElement>) {\n    const bidKey: BidKey = event.currentTarget.dataset.bidkey as BidKey;\n    if (_.isEmpty(biddingSoFar)) {\n      if (biddingSystem[bidKey]) {\n        setPotentialBidDetails({bidKey, description: biddingSystem[bidKey].description});\n      } else {\n        setPotentialBidDetails({bidKey, description: naturalBid.description});\n      }\n    } else {\n      // tslint:disable-next-line:no-non-null-assertion\n      const lastBid = _.last(biddingSoFar)!.bid;\n      if (lastBid.responses && lastBid.responses[bidKey]) {\n        setPotentialBidDetails({bidKey, description: lastBid.responses[bidKey].description});\n      } else {\n        setPotentialBidDetails({bidKey, description: naturalBid.description});\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <button onClick={resetBidding}>Reset Bidding</button>\n      <button onClick={undoLastBid}>Undo</button>\n      <br />\n      <div style={{display: \"grid\", gridTemplateColumns: \"50% 50%\"}}>\n        <div>N</div>\n        <div>S</div>\n        {biddingSoFar.map(bidRecord => (\n          <div key={bidRecord.bidKey}>\n            <strong>{bidRecord.bidKey}</strong> - {bidRecord.bid.description}\n          </div>\n        ))}\n        <div>*</div>\n        {_.isEmpty(biddingSoFar) && <div />}\n      </div>\n      {potentialBidDetails && (\n        <div>\n          <strong>{potentialBidDetails.bidKey}</strong> {potentialBidDetails.description}\n        </div>\n      )}\n      <div style={{display: \"grid\", gridTemplateColumns: \"3rem 3rem 3rem 3rem 3rem\"}}>\n        {getPossibleBids(biddingSoFar).map(bidKey => (\n          <button\n            key={bidKey}\n            data-bidkey={bidKey}\n            onClick={handleMakeBid}\n            onMouseEnter={displayBidDetails}\n            onPointerEnter={displayBidDetails}\n          >\n            {bidKey}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","/* tslint:disable:no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ninterface Config {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}